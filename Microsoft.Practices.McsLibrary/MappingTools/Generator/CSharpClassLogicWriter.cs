using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;

namespace MappingTools.Generator
{
    public class CSharpClassLogicWriter : FileMedia, IClassLogicWriter
    {
        private string _classLogicNameSpace;
        private string _classLogicName;
        private string _classNameSpace;
        private string _className;

        private ArrayList _keyItems = ArrayList.Synchronized(new ArrayList());
        private ArrayList _allItems = ArrayList.Synchronized(new ArrayList());

        public CSharpClassLogicWriter()
        {
        }

        public CSharpClassLogicWriter(string basePath)
        {
            BasePath = basePath;
        }

        #region IClassLogicWriter Members

        public string ClassLogicNameSpace
        {
            set { _classLogicNameSpace = value; }
        }

        public string ClassLogicName
        {
            set { _classLogicName = value; }
        }

        public string ClassNameSpace
        {
            set { _classNameSpace = value; }
        }

        public string ClassName
        {
            set { _className = value; }
        }

        public void AppendProperty(string propertyName, Type propertyType, bool isKey)
        {
            DictionaryEntry entry = new DictionaryEntry(propertyName, propertyType);

            if (isKey)
            {
                _keyItems.Add(entry);
            }

            _allItems.Add(entry);
        }

        public void ClearProperty()
        {
            _keyItems.Clear();
            _allItems.Clear();
        }

        public void WriteOut()
        {
            string fileName = string.Format("{0}\\{1}.cs", _basePath, _classLogicName);

            using (StreamWriter writer = new StreamWriter(fileName))
            {
                WriteComment(writer);
                WriteHeader(writer);
                WriteBody(writer);
            }
        }

        #endregion

        private void WriteComment(StreamWriter writer)
        {

            writer.WriteLine("/******************************************************");
            writer.WriteLine("* author :  Î÷éTïhÑ©");
            writer.WriteLine("* email  :  Î÷éTïhÑ©");
            writer.WriteLine("* function: ");
            writer.WriteLine("* Auto generated by MappingTools at {0}", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            writer.WriteLine("******************************************************/");
            writer.WriteLine();
        }

        private void WriteHeader(StreamWriter writer)
        {
            writer.WriteLine("using System;");
            writer.WriteLine("using System.Collections.Generic;");
            writer.WriteLine("using System.Text;");
            writer.WriteLine();

            writer.WriteLine("using Microsoft.Practices.McsLibrary.Data;");
            writer.WriteLine("using LPS.DIP.BizTier.Common;");
            if (_classLogicNameSpace != _classNameSpace) writer.WriteLine("using {0};", _classNameSpace);
            writer.WriteLine();
        }


        private void WriteBody(StreamWriter writer)
        {
            writer.WriteLine("namespace {0}", _classLogicNameSpace);
            writer.WriteLine("{");
            writer.WriteLine("\tpublic class {0}", _classLogicName);
            writer.WriteLine("\t{");

            writer.WriteLine("\t\tprivate static ORMapping _dbHelper = ORMappingFactory.CreateInstance();");
            writer.WriteLine();

            WriteMethod(writer, "Load", _keyItems);
            WriteMethod(writer, "Save", _allItems);
            WriteMethod(writer, "Update", _allItems);
            WriteMethod(writer, "Delete", _keyItems);

            writer.WriteLine("\t}");

            writer.WriteLine("}");
        }

        private void WriteMethod(StreamWriter writer, string prefix, ArrayList paramList)
        {
            writer.Write("\t\tpublic static {0} {1}{2}(", (prefix == "Load") ? _className : "void", prefix, _className);
            for (int i = 0; i < paramList.Count; i++)
            {
                DictionaryEntry entry = (DictionaryEntry)(paramList[i]);
                writer.Write("{0} {1}", ((Type)(entry.Value)).Name, Misc.GetParameterName((string)(entry.Key)));
                if (i < (paramList.Count - 1)) writer.Write(", ");
            }
            writer.WriteLine(")");

            writer.WriteLine("\t\t{");

            string varName = Misc.GetParameterName(_className);

            writer.WriteLine("\t\t\t{0} {1} = new {0}();", _className, varName);
            writer.WriteLine();

            foreach (DictionaryEntry entry in paramList)
            {
                writer.WriteLine("\t\t\t{0}.{1} = {2};", varName, entry.Key, Misc.GetParameterName((string)(entry.Key)));
            }
            writer.WriteLine();

            if (prefix == "Load")
            {
                writer.WriteLine("\t\t\treturn ({0})_dbHelper.Load(Utils.NewConnection(), {1});", _className, varName);
            }
            else
            {
                writer.WriteLine("\t\t\t_dbHelper.{0}(Utils.NewConnection(), {1});", prefix, varName);
            }

            writer.WriteLine("\t\t}");
            writer.WriteLine();
        }
    }
}
