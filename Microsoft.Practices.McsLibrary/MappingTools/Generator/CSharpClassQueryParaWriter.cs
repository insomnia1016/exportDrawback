using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;
using System.IO;

namespace MappingTools.Generator
{
    class CSharpClassQueryParaWriter : FileMedia, IClassWriter
    {
        private string _nameSpace;
        private string _className;
        string _tableName;
        private Hashtable _propertyList = Hashtable.Synchronized(new Hashtable());
        Hashtable _fieldList = Hashtable.Synchronized(new Hashtable());

        public CSharpClassQueryParaWriter()
        {
        }

        public CSharpClassQueryParaWriter(string basePath)
        {
            BasePath = basePath;
        }

        void WriteComment(StreamWriter writer, params string[] comments)
        {
            writer.WriteLine(@"        /// <summary>");
            foreach (string s in comments)
                writer.WriteLine(string.Format(@"        /// {0}", s.Replace("\n","\n ///")));
            writer.WriteLine(@"        /// </summary>");
        }

        #region IClassWriter 成员

        public string NameSpace
        {
            set { _nameSpace = value; }
            get { return _nameSpace; }
        }

        public string ClassName
        {
            set { _className = value; }
            get { return _className; }
        }

        public string TableName
        {
            set { _tableName = value; }
            get { return _tableName; }
        }

        public void AppendProperty(string propertyName, TableColumn col, Type propertyType)
        {
            _propertyList.Add(propertyName, propertyType);
            _fieldList.Add(propertyName, col);
        }

        public void AppendProperty(string propertyName, Type propertyType)
        {
            _propertyList[propertyName] = propertyType;
        }

        public void RemoveProperty(string propertyName)
        {
            _propertyList.Remove(propertyName);
            _fieldList.Remove(propertyName);
        }

        public void ClearProperty()
        {
            _propertyList.Clear();
            _fieldList.Clear();
        }

        public void WriteOut()
        {
            string fileName = string.Format("{0}\\{1}.cs", _basePath, _className);

            using (StreamWriter writer = new StreamWriter(fileName, false, System.Text.UTF8Encoding.Default))
            {
                WriteComment(writer);
                WriteHeader(writer);
                WriteBody(writer);
            }
        }

        #endregion
        private void WriteComment(StreamWriter writer)
        {
            writer.WriteLine("/******************************************************");
            writer.WriteLine("* author :  chenjianwu");
            writer.WriteLine("* email  :  chenjianwu@sh.intra.customs.gov.cn");
            writer.WriteLine("* function: ");
            writer.WriteLine("* Auto generated by MappingTools at {0}", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            writer.WriteLine("******************************************************/");
            writer.WriteLine();
        }

        private void WriteHeader(StreamWriter writer)
        {
            writer.WriteLine("using System;");
            writer.WriteLine("using System.Collections.Generic;");
            writer.WriteLine("using System.Text;");
            writer.WriteLine();
        }

        private void WriteBody(StreamWriter writer)
        {
            writer.WriteLine("namespace {0}", string.IsNullOrEmpty(_nameSpace) ? "NoNameSpace" : _nameSpace);
            writer.WriteLine("{");
            WriteComment(writer,
                "表", _tableName, "的查询参数类\t",
                Misc.GetComment(this._tableName),
                "参数如果是数组，那么一定是array[3]，其中array[0],array[2]分别可为空，表示最小最大值，array[1]表示等于查询。",
                "范围查询参数必须是数值型或者日期型，枚举请手动修改参数类型或代码生成中设定。",
                "例如，需要查询一个值=2的条件，para可以设定为array[0]=array[2]=null,array[1]=2。",
                "需要查询大于0小于50，设定为array[0]=0,array[2]=50,array[1]=null",
                "如果同时指定，那么表示or关系，等于array[1]，或介于array[0]-array[2]之间。",
                "三个参数可以都不填写，或只填写1个，或2个。");
            writer.WriteLine("\t[Serializable]");
            writer.WriteLine("\tpublic partial class {0} : BaseQueryPara", _className);
            writer.WriteLine("\t{");

            foreach (DictionaryEntry entry in _propertyList)
            {
                WriteProperty(writer, (string)(entry.Key), (Type)(entry.Value));
            }

            writer.WriteLine("\t}");

            writer.WriteLine("}");
        }

        private void WriteProperty(StreamWriter writer, string propertyName, Type propertyType)
        {
            string privateName = Misc.GetPrivateName(propertyName);
            string typeName = propertyType.Name;
            switch (propertyName)
            {
                case "ExeMark":
                    typeName = "ExeMark";
                    break;
                case "ProcMark":
                    typeName = "ProcMark";
                    break;
                default:
                    break;
            }
            TableColumn col = (TableColumn)_fieldList[propertyName];
            if (propertyType.IsValueType && col.CanBeNull) typeName += "?";
            switch (col.DatabaseType)
            {
                case System.Data.DbType.Currency:
                case System.Data.DbType.Date:
                case System.Data.DbType.DateTime:
                case System.Data.DbType.DateTime2:
                case System.Data.DbType.Decimal:
                case System.Data.DbType.Double:
                case System.Data.DbType.Int16:
                case System.Data.DbType.Int32:
                case System.Data.DbType.Int64:
                case System.Data.DbType.Time:
                case System.Data.DbType.UInt16:
                case System.Data.DbType.UInt32:
                case System.Data.DbType.UInt64:
                case System.Data.DbType.VarNumeric:
                    writer.WriteLine("\t\tprivate {0}[] {1} = new {0}[3];", typeName, privateName);
                    typeName += "[]";
                    break;
                default:
                    writer.WriteLine("\t\tprivate {0} {1};", typeName, privateName);
                    break;
            }
            string comment = Misc.GetComment(_tableName, col.Name);
            WriteComment(writer, comment);
            writer.WriteLine("\t\tpublic {0} {1}", typeName, propertyName);
            writer.Write("\t\t{ get { return " + privateName + "; }");
            writer.Write(" set { " + privateName + " = value; }");
            writer.WriteLine(" }");
            writer.WriteLine();
        }
    }
}
